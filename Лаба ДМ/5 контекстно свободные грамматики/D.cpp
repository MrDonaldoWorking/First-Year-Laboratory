/*
      РћЈРћЊРћЈРћЂРћ│РћЈРћЂРћЈРћЊРћЈРћ│РћЊРћЃРћЈРћЊРћЈРћЊРћ│РћЃРћЈРћЊРћЈРћЊ
      РћЃРћЃРћБРћЂРћЃРћБРћЂРћБРћФРћЃРћЃРћЃРћЃРћЃРћЃРћБРћФРћЃРћЃРћЌРћЏРћЃРћЃ
      РћБРћЏРћЌРћЂРћЃРћЌРћЂРћЃРћЌРћЃРћЃРћЃРћЃРћЃРћЃРћЃРћЃРћЃРћЃ  РћЃРћЃ

             РацРаХРаХРаХРаХРаХРаХРацРаё
 РађРађРађРађРађРађРађРааРаЙРа┐Ра┐Ра┐Ра┐Ра┐Ра┐Ра┐Ра┐Ра┐Ра┐РаиРаё
 РађРађРађРађРађРађРааРа┐Ра┐Ра┐Ра┐Ра┐Ра┐Ра┐Ра┐Ра┐Ра┐Ра┐Ра┐Ра┐Ра┐Раё
 РађРађРађРађРађРађРаИРа┐РаЏРаЅРаЅРаЅРа╗Ра┐Ра┐РаЪРаЅРаЅРаЅРаЏРа┐РаЄ
 РађРађРађРађРађРађРаИРаЄРађРађРаХРађРаИРа┐Ра┐РаЄ ­Ъћх РаИРаЄ
 РађРађРађРађРађРађРађРа╗РаХРацРацРааРа┐РаЃРаўРа┐РаёРацРацРаХРаЪ
 РађРађРађРађРађРађРађРаЙРа┐РаЎРаХРа┐Ра┐РацРацРа┐Ра┐РаХРаЈРа╗Раи
 РађРађРађРађРађРађРађРа╗РаХРаюРа░РаГРаЕРаЇРаГРаЇРаГРа▒РааРаХРаЪ
 РађРађРађРађРааРаХРадРаѕРа╗Ра┐РаХРаГРаўРаЃРаЏРаЃРаФРа┤Ра┐РаЪРаАРаЙРаЪРаѓ
 РађРађРађРађРаіРаЅРаЏРа│РадРаѕРаЅРаЏРаЏРаЏРаЏРаЏРаЏРаЅРаЂРааРа┐РаІРађРа▒Раё
 РађРађРађРаћРађРађРаёРађРаЅРа│РадРаёРа│РаХРаХРаЃРааРацРаъРаЏРаЂРааРаѓРађРаЎРаё
 РађРађРајРађРађРађРаЄРађРађРаИРађРаЈРааРаГРаЇРаѕРаЈРаЄРађРађРађРа╝РађРађРађРаЎРає
 РађРа╝РађРађРађРађРаиРаћРањРаџРаЇРаБРаИРа┐Ра┐РаИРаІРаЄРааРа┤РаџРа╣РађРађРађРађРа╗
 РађРа╗РаёРађРађРа░РаЂРађРађРађРаЌРа╣РаИРа┐Ра┐РаИРаЅРаЄРаЄРађРађРаѕРаЄРађРађРађРаИ
 РађРађРаЎРадРаёРаИРађРађРађРађРа▒Ра╣РаИРа┐Ра┐РаИРа╣РаюРађРађРађРађРаЄРађРађРа┤РаІ
 РађРађРађРаѕРаЃРа╝РаХРаёРађРађРаИРаЙРаХРањРањРаџРаЙРацРацРацРацРаЙРаЃРаХРаіРаЂ
 РађРађРађРађРађРађРаЅРаЅРаЅРаЅРаЂРађРађРађРађРађРађРађРађРађРађРаЅ
 РађРађРађРађРађРађРаћРађРаХРађРађРађРађРађРађРађРађРаИРаЄРађРађРаБ
 РађРађРађРађРађРађРаЄРаИРаЄРађРађРађРађРајРаєРађРађРаИРаДРађРађРаИ
 РађРађРађРађРађРа░РаЂРаЙРаЂРађРађРађРааРаЄРа▒РађРађРаИРа┐РађРађРађРаЄ
 РађРађРађРађРађРаИРађРа┐РађРађРађРађРаИРађРаИРађРађРађРа┐РађРађРађРаЄ
 РађРађРађРађРађРаѕРаЅРаЅРањРањРањРањРаіРађРаѕРањРањРањРаЏРаЊРаіРаЅРаЂ
 РађРађРађРађРааРаХРаХРацРа▓РаХРађРађРађРађРађРађРааРаиРаХРаХРаѓРацРаХРадРаё
 РађРађРађРађРа┐Ра┐Ра┐Ра┐РаДРаЕРаёРађРађРађРађРађРагРаГРаГРа▒Ра┐Ра┐Ра┐Ра┐РаЪ


       РќЉРќЉРќЉРќЉРќѕРќЉРќЉРќЉРќЉРќЉРќЉРќЉРќЉРќЉРќЉРќЉРќЉРќЉРќѕРќЉРќЉРќЉРќЉ
       РќЉРќЉРќЉРќѕРќЉРќЉРќЉРќЉРќЉРќЉРќЉРќЉРќЉРќЉРќёРќёРќёРќЉРќЉРќѕРќЉРќЉРќЉ
       РќЉРќЉРќЉРќѕРќЉРќЉРќёРќёРќёРќЉРќЉРќёРќЉРќЉРќѕРќѕРќѕРќЉРќЉРќѕРќЉРќЉРќЉ
       РќЉРќЉРќЉРќёРќѕРќЉРќёРќЉРќЉРќЉРќђРќђРќђРќЉРќЉРќЉРќёРќЉРќѕРќёРќЉРќЉРќЉ
       РќЉРќЉРќЉРќѕРќЉРќЉРќђРќѕРќђРќѕРќђРќѕРќђРќѕРќђРќѕРќђРќЉРќЉРќѕРќЉРќЉРќЉ
       РќЉРќЉРќЉРќёРќѕРќѕРќёРќёРќђРќђРќђРќђРќђРќђРќђРќёРќёРќѕРќѕРќёРќЉРќЉРќЉ
       РќЉРќёРќѕРќЉРќѕРќђРќђРќѕРќђРќђРќђРќѕРќђРќђРќђРќѕРќђРќђРќѕРќЉРќѕРќёРќЉ
       РќёРќђРќЉРќёРќёРќђРќёРќёРќђРќђРќђРќёРќђРќђРќђРќёРќёРќђРќёРќёРќЉРќђРќё
       РќѕРќЉРќЉРќЉРќЉРќђРќёРќЉРќѕРќёРќЉРќЉРќЉРќёРќѕРќЉРќёРќђРќЉРќЉРќЉРќЉРќѕ
       РќЉРќђРќёРќёРќЉРќѕРќЉРќЉРќѕРќёРќёРќёРќёРќёРќѕРќЉРќЉРќѕРќЉРќёРќёРќђРќЉ
       РќЉРќЉРќЉРќђРќѕРќѕРќёРќёРќѕРќѕРќѕРќѕРќѕРќѕРќѕРќёРќёРќѕРќѕРќђРќЉРќЉРќЉ
       РќЉРќЉРќЉРќѕРќѕРќѕРќѕРќѕРќѕРќѕРќѕРќђРќѕРќѕРќѕРќѕРќѕРќѕРќѕРќѕРќЉРќЉРќЉ
       РќЉРќЉРќёРќёРќѕРќђРќђРќђРќђРќѕРќЉРќЉРќЉРќѕРќђРќђРќђРќђРќѕРќёРќёРќЉРќЉ
       РќЉРќЉРќђРќёРќёРќёРќёРќёРќђРќђРќЉРќЉРќЉРќђРќђРќёРќёРќёРќёРќёРќђРќЉРќЉ
*/

#include <stdio.h>
#include <string>
#include <vector>
#include <map>
#include <set>

using namespace std;

const int MOD = 1000000007;

bool readString(string &s) {
    char c;
    while (scanf("%c", &c) == 1) {
        if (c == '\n')
            break;
        s += c;
    }

    return !s.empty();
}

map<char, vector<vector<int>>> dp;
map<char, vector<string>> rules;
string w;
int rec(char nonterminal, int i, int j) {
    // printf("in rec: %c %d %d\n", nonterminal, i, j);
    if (dp[nonterminal][i][j] == -1) {
        // printf("dp[%c][%d][%d] == -1\n", nonterminal, i, j);
        int cnt = 0;
        for (auto &str : rules[nonterminal]) {
            // printf("===considering %s===\n", str.c_str());
            if (str.length() == 2) {
                for (int k = i + 1; k < j; ++k)
                    cnt = (int) ((cnt + (long long) rec(str[0], i, k) * rec(str[1], k, j)) % MOD);
                // printf("It's nonterminals");
            } else {
                if (j - i == 1 && w[i] == str[0])
                    cnt = (cnt + 1) % MOD;
                // printf("It's terminal");
            }
            // printf(", cnt = %d\n===end of considering===\n", cnt);
        }

        dp[nonterminal][i][j] = cnt;
        // printf("dp[%c][%d][%d] = %d\n", nonterminal, i, j, cnt);
    }

    // printf("exit rec\n");

    return dp[nonterminal][i][j];
}

int main() {
    freopen("nfc.in", "r", stdin);
    freopen("nfc.out", "w", stdout);

    int n;
    char start;
    scanf("%d %c\n", &n, &start);

    while (n--) {
        char from;
        scanf("%c ->%*c", &from);
        string to;
        readString(to);

        rules[from].push_back(to);
    }

    readString(w);

    for (char c = 'A'; c <= 'Z'; ++c)
        dp[c].resize(w.length(), vector<int>(w.length() + 1, -1));

    printf("%d", rec(start, 0, (int) w.length()));

    return 0;
}

